/* tslint:disable */
/* eslint-disable */
/**
 * Riot Proxy Service
 * A proxy service for the Riot API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface SummonerDto
 */
export interface SummonerDto {
    /**
     * 
     * @type {string}
     * @memberof SummonerDto
     */
    'puuid': string;
}

/**
 * MatchApi - axios parameter creator
 * @export
 */
export const MatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchControllerGetById: async (matchId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'matchId' is not null or undefined
            assertParamExists('matchControllerGetById', 'matchId', matchId)
            const localVarPath = `/match/{matchId}`
                .replace(`{${"matchId"}}`, encodeURIComponent(String(matchId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} puuid 
         * @param {string} timePeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchControllerGetByName: async (puuid: string, timePeriod: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'puuid' is not null or undefined
            assertParamExists('matchControllerGetByName', 'puuid', puuid)
            // verify required parameter 'timePeriod' is not null or undefined
            assertParamExists('matchControllerGetByName', 'timePeriod', timePeriod)
            const localVarPath = `/match/summoner/{puuid}/time-period/{timePeriod}`
                .replace(`{${"puuid"}}`, encodeURIComponent(String(puuid)))
                .replace(`{${"timePeriod"}}`, encodeURIComponent(String(timePeriod)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchApi - functional programming interface
 * @export
 */
export const MatchApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = MatchApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchControllerGetById(matchId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchControllerGetById(matchId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} puuid 
         * @param {string} timePeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async matchControllerGetByName(puuid: string, timePeriod: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.matchControllerGetByName(puuid, timePeriod, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * MatchApi - factory interface
 * @export
 */
export const MatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = MatchApiFp(configuration)
    return {
        /**
         * 
         * @param {string} matchId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchControllerGetById(matchId: string, options?: any): AxiosPromise<object> {
            return localVarFp.matchControllerGetById(matchId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} puuid 
         * @param {string} timePeriod 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        matchControllerGetByName(puuid: string, timePeriod: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.matchControllerGetByName(puuid, timePeriod, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchApi - object-oriented interface
 * @export
 * @class MatchApi
 * @extends {BaseAPI}
 */
export class MatchApi extends BaseAPI {
    /**
     * 
     * @param {string} matchId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchApi
     */
    public matchControllerGetById(matchId: string, options?: AxiosRequestConfig) {
        return MatchApiFp(this.configuration).matchControllerGetById(matchId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} puuid 
     * @param {string} timePeriod 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchApi
     */
    public matchControllerGetByName(puuid: string, timePeriod: string, options?: AxiosRequestConfig) {
        return MatchApiFp(this.configuration).matchControllerGetByName(puuid, timePeriod, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SummonerApi - axios parameter creator
 * @export
 */
export const SummonerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summonerControllerGetByName: async (name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('summonerControllerGetByName', 'name', name)
            const localVarPath = `/summoner/{name}`
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SummonerApi - functional programming interface
 * @export
 */
export const SummonerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SummonerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summonerControllerGetByName(name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummonerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summonerControllerGetByName(name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SummonerApi - factory interface
 * @export
 */
export const SummonerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SummonerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summonerControllerGetByName(name: string, options?: any): AxiosPromise<SummonerDto> {
            return localVarFp.summonerControllerGetByName(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SummonerApi - object-oriented interface
 * @export
 * @class SummonerApi
 * @extends {BaseAPI}
 */
export class SummonerApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SummonerApi
     */
    public summonerControllerGetByName(name: string, options?: AxiosRequestConfig) {
        return SummonerApiFp(this.configuration).summonerControllerGetByName(name, options).then((request) => request(this.axios, this.basePath));
    }
}


